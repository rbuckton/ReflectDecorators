{"version":3,"file":"Reflect.js","sourceRoot":"","sources":["Reflect.ts"],"names":[],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\nnamespace Reflect {\r\n    // Metadata Proposal\r\n    // https://rbuckton.github.io/reflect-metadata/\r\n\r\n    type HashMap<V> = Record<string, V>;\r\n\r\n    interface BufferLike {\r\n        [offset: number]: number;\r\n        length: number;\r\n    }\r\n\r\n    type IteratorResult<T> = { value: T, done: false } | { value: never, done: true };\r\n\r\n    interface Iterator<T> {\r\n        next(value?: any): IteratorResult<T>;\r\n        throw?(value: any): IteratorResult<T>;\r\n        return?(value?: T): IteratorResult<T>;\r\n    }\r\n\r\n    interface Iterable<T> {\r\n        \"@@iterator\"(): Iterator<T>;\r\n    }\r\n\r\n    interface IterableIterator<T> extends Iterator<T> {\r\n        \"@@iterator\"(): IterableIterator<T>;\r\n    }\r\n\r\n    interface Map<K, V> extends Iterable<[K, V]> {\r\n        size: number;\r\n        has(key: K): boolean;\r\n        get(key: K): V;\r\n        set(key: K, value?: V): this;\r\n        delete(key: K): boolean;\r\n        clear(): void;\r\n        keys(): IterableIterator<K>;\r\n        values(): IterableIterator<V>;\r\n        entries(): IterableIterator<[K, V]>;\r\n    }\r\n\r\n    interface MapConstructor {\r\n        new (): Map<any, any>;\r\n        new <K, V>(): Map<K, V>;\r\n        prototype: Map<any, any>;\r\n    }\r\n\r\n    interface Set<T> extends Iterable<T> {\r\n        size: number;\r\n        has(value: T): boolean;\r\n        add(value: T): this;\r\n        delete(value: T): boolean;\r\n        clear(): void;\r\n        keys(): IterableIterator<T>;\r\n        values(): IterableIterator<T>;\r\n        entries(): IterableIterator<[T, T]>;\r\n    }\r\n\r\n    interface SetConstructor {\r\n        new (): Set<any>;\r\n        new <T>(): Set<T>;\r\n        prototype: Set<any>;\r\n    }\r\n\r\n    interface WeakMap<K, V> {\r\n        clear(): void;\r\n        delete(key: K): boolean;\r\n        get(key: K): V;\r\n        has(key: K): boolean;\r\n        set(key: K, value?: V): WeakMap<K, V>;\r\n    }\r\n\r\n    interface WeakMapConstructor {\r\n        new (): WeakMap<any, any>;\r\n        new <K, V>(): WeakMap<K, V>;\r\n        prototype: WeakMap<any, any>;\r\n    }\r\n\r\n    type MemberDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\r\n    declare const Symbol: { iterator: symbol, toPrimitive: symbol };\r\n    declare const Set: SetConstructor;\r\n    declare const WeakMap: WeakMapConstructor;\r\n    declare const Map: MapConstructor;\r\n    declare const global: any;\r\n    declare const crypto: Crypto;\r\n    declare const msCrypto: Crypto;\r\n    declare const process: any;\r\n\r\n    /**\r\n      * Applies a set of decorators to a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @returns The result of applying the provided decorators.\r\n      * @remarks Decorators are applied in reverse order of their positions in the array.\r\n      * @example\r\n      *\r\n      *     class Example { }\r\n      *\r\n      *     // constructor\r\n      *     Example = Reflect.decorate(decoratorsArray, Example);\r\n      *\r\n      */\r\n    export declare function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param propertyKey The property key to decorate.\r\n      * @param attributes A property descriptor.\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod() { }\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(Example, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(Example.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n      *\r\n      */\r\n    export declare function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | undefined;\r\n\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param propertyKey The property key to decorate.\r\n      * @param attributes A property descriptor.\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod() { }\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(Example, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(Example.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n      *\r\n      */\r\n    export declare function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes: PropertyDescriptor): PropertyDescriptor;\r\n\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    export declare function metadata(metadataKey: any, metadataValue: any): { (target: Function): void; (target: any, propertyKey: string | symbol): void; };\r\n\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): ClassDecorator {\r\n      *         return target => Reflect.defineMetadata(\"custom:annotation\", options, target);\r\n      *     }\r\n      *\r\n      */\r\n    export declare function defineMetadata(metadataKey: any, metadataValue: any, target: any): void;\r\n\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param propertyKey The property key for the target.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): PropertyDecorator {\r\n      *         return (target, key) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    export declare function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey: string | symbol): void;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function hasMetadata(metadataKey: any, target: any): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function hasMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function hasOwnMetadata(metadataKey: any, target: any): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function hasOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function getMetadata(metadataKey: any, target: any): any;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function getOwnMetadata(metadataKey: any, target: any): any;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(Example);\r\n      *\r\n      */\r\n    export declare function getMetadataKeys(target: any): any[];\r\n\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(Example);\r\n      *\r\n      */\r\n    export declare function getOwnMetadataKeys(target: any): any[];\r\n\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getOwnMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function deleteMetadata(metadataKey: any, target: any): boolean;\r\n\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function deleteMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n    (function (this: any, factory: (exporter: <K extends keyof typeof Reflect>(key: K, value: typeof Reflect[K]) => void) => void) {\r\n        const root = typeof global === \"object\" ? global :\r\n            typeof self === \"object\" ? self :\r\n            typeof this === \"object\" ? this :\r\n            Function(\"return this;\")();\r\n\r\n        let exporter = makeExporter(Reflect);\r\n        if (typeof root.Reflect === \"undefined\") {\r\n            root.Reflect = Reflect;\r\n        }\r\n        else {\r\n            exporter = makeExporter(root.Reflect, exporter);\r\n        }\r\n\r\n        factory(exporter);\r\n\r\n        function makeExporter(target: typeof Reflect, previous?: <K extends keyof typeof Reflect>(key: K, value: typeof Reflect[K]) => void) {\r\n            return <K extends keyof typeof Reflect>(key: K, value: typeof Reflect[K]) => {\r\n                if (typeof target[key] !== \"function\") {\r\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value });\r\n                }\r\n                if (previous) previous(key, value);\r\n            };\r\n        }\r\n    })\r\n    (function (exporter) {\r\n        const hasOwn = Object.prototype.hasOwnProperty;\r\n\r\n        // feature test for Symbol support\r\n        const supportsSymbol = typeof Symbol === \"function\";\r\n        const toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\r\n        const iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\r\n        const supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\r\n        const supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\r\n        const downLevel = !supportsCreate && !supportsProto;\r\n\r\n        const HashMap = {\r\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\r\n            create: supportsCreate\r\n                ? <V>() => MakeDictionary(Object.create(null) as HashMap<V>)\r\n                : supportsProto\r\n                    ? <V>() => MakeDictionary({ __proto__: null as any } as HashMap<V>)\r\n                    : <V>() => MakeDictionary({} as HashMap<V>),\r\n\r\n            has: downLevel\r\n                ? <V>(map: HashMap<V>, key: string | number | symbol) => hasOwn.call(map, key)\r\n                : <V>(map: HashMap<V>, key: string | number | symbol) => key in map,\r\n\r\n            get: downLevel\r\n                ? <V>(map: HashMap<V>, key: string | number | symbol): V | undefined => hasOwn.call(map, key) ? map[key] : undefined\r\n                : <V>(map: HashMap<V>, key: string | number | symbol): V | undefined => map[key],\r\n        };\r\n\r\n        // Load global or shim versions of Map, Set, and WeakMap\r\n        const functionPrototype = Object.getPrototypeOf(Function);\r\n        const usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\r\n        const _Map: typeof Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\r\n        const _Set: typeof Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\r\n        const _WeakMap: typeof WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\r\n\r\n        // [[Metadata]] internal slot\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\r\n        const Metadata = new _WeakMap<any, Map<string | symbol | undefined, Map<any, any>>>();\r\n\r\n        function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n        function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | undefined;\r\n        function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes: PropertyDescriptor): PropertyDescriptor;\r\n\r\n        /**\r\n         * Applies a set of decorators to a property of a target object.\r\n         * @param decorators An array of decorators.\r\n         * @param target The target object.\r\n         * @param propertyKey (Optional) The property key to decorate.\r\n         * @param attributes (Optional) The property descriptor for the target key.\r\n         * @remarks Decorators are applied in reverse order.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     Example = Reflect.decorate(decoratorsArray, Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     Object.defineProperty(Example, \"staticMethod\",\r\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n         *\r\n         *     // method (on prototype)\r\n         *     Object.defineProperty(Example.prototype, \"method\",\r\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n         *\r\n         */\r\n        function decorate(decorators: (ClassDecorator | MemberDecorator)[], target: any, propertyKey?: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | Function | undefined {\r\n            if (!IsUndefined(propertyKey)) {\r\n                if (!IsArray(decorators)) throw new TypeError();\r\n                if (!IsObject(target)) throw new TypeError();\r\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes)) throw new TypeError();\r\n                if (IsNull(attributes)) attributes = undefined;\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n                return DecorateProperty(<MemberDecorator[]>decorators, target, propertyKey, attributes);\r\n            }\r\n            else {\r\n                if (!IsArray(decorators)) throw new TypeError();\r\n                if (!IsConstructor(target)) throw new TypeError();\r\n                return DecorateConstructor(<ClassDecorator[]>decorators, <Function>target);\r\n            }\r\n        }\r\n\r\n        exporter(\"decorate\", decorate);\r\n\r\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\r\n\r\n        /**\r\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n         * @param metadataKey The key for the metadata entry.\r\n         * @param metadataValue The value for the metadata entry.\r\n         * @returns A decorator function.\r\n         * @remarks\r\n         * If `metadataKey` is already defined for the target and target key, the\r\n         * metadataValue for that key will be overwritten.\r\n         * @example\r\n         *\r\n         *     // constructor\r\n         *     @Reflect.metadata(key, value)\r\n         *     class Example {\r\n         *     }\r\n         *\r\n         *     // property (on constructor, TypeScript only)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         static staticProperty;\r\n         *     }\r\n         *\r\n         *     // property (on prototype, TypeScript only)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         property;\r\n         *     }\r\n         *\r\n         *     // method (on constructor)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         static staticMethod() { }\r\n         *     }\r\n         *\r\n         *     // method (on prototype)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         method() { }\r\n         *     }\r\n         *\r\n         */\r\n        function metadata(metadataKey: any, metadataValue: any) {\r\n            function decorator(target: Function): void;\r\n            function decorator(target: any, propertyKey: string | symbol): void;\r\n            function decorator(target: any, propertyKey?: string | symbol): void {\r\n                if (!IsObject(target)) throw new TypeError();\r\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey)) throw new TypeError();\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n            }\r\n            return decorator;\r\n        }\r\n\r\n        exporter(\"metadata\", metadata);\r\n\r\n        // 4.1.3 Reflect.defineMetadata(metadataKey, metadataValue, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.definemetadata\r\n\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: any): void;\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey: string | symbol): void;\r\n\r\n        /**\r\n         * Define a unique metadata entry on the target.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param metadataValue A value that contains attached metadata.\r\n         * @param target The target object on which to define metadata.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\r\n         *\r\n         *     // decorator factory as metadata-producing annotation.\r\n         *     function MyAnnotation(options): Decorator {\r\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n         *     }\r\n         *\r\n         */\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey?: string | symbol): void {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"defineMetadata\", defineMetadata);\r\n\r\n        // 4.1.4 Reflect.hasMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.hasmetadata\r\n\r\n        function hasMetadata(metadataKey: any, target: any): boolean;\r\n        function hasMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n        /**\r\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function hasMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"hasMetadata\", hasMetadata);\r\n\r\n        // 4.1.5 Reflect.hasOwnMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-hasownmetadata\r\n\r\n        function hasOwnMetadata(metadataKey: any, target: any): boolean;\r\n        function hasOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n        /**\r\n         * Gets a value indicating whether the target object has the provided metadata key defined.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function hasOwnMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\r\n\r\n        // 4.1.6 Reflect.getMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getmetadata\r\n\r\n        function getMetadata(metadataKey: any, target: any): any;\r\n        function getMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n        /**\r\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getMetadata\", getMetadata);\r\n\r\n        // 4.1.7 Reflect.getOwnMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getownmetadata\r\n\r\n        function getOwnMetadata(metadataKey: any, target: any): any;\r\n        function getOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n        /**\r\n         * Gets the metadata value for the provided metadata key on the target object.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getOwnMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getOwnMetadata\", getOwnMetadata);\r\n\r\n        // 4.1.8 Reflect.getMetadataKeys(target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getmetadatakeys\r\n\r\n        function getMetadataKeys(target: any): any[];\r\n        function getMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n        /**\r\n         * Gets the metadata keys defined on the target object or its prototype chain.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns An array of unique metadata keys.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getMetadataKeys(Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getMetadataKeys(target: any, propertyKey?: string | symbol): any[] {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryMetadataKeys(target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getMetadataKeys\", getMetadataKeys);\r\n\r\n        // 4.1.9 Reflect.getOwnMetadataKeys(target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getownmetadata\r\n\r\n        function getOwnMetadataKeys(target: any): any[];\r\n        function getOwnMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n        /**\r\n         * Gets the unique metadata keys defined on the target object.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns An array of unique metadata keys.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getOwnMetadataKeys(Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getOwnMetadataKeys(target: any, propertyKey?: string | symbol): any[] {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\r\n\r\n        // 4.1.10 Reflect.deleteMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-deletemetadata\r\n\r\n        function deleteMetadata(metadataKey: any, target: any): boolean;\r\n        function deleteMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n        /**\r\n         * Deletes the metadata entry from the target object with the provided key.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function deleteMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            const metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\r\n            if (IsUndefined(metadataMap)) return false;\r\n            if (!metadataMap.delete(metadataKey)) return false;\r\n            if (metadataMap.size > 0) return true;\r\n            const targetMetadata = Metadata.get(target);\r\n            targetMetadata.delete(propertyKey);\r\n            if (targetMetadata.size > 0) return true;\r\n            Metadata.delete(target);\r\n            return true;\r\n        }\r\n\r\n        exporter(\"deleteMetadata\", deleteMetadata);\r\n\r\n        function DecorateConstructor(decorators: ClassDecorator[], target: Function): Function {\r\n            for (let i = decorators.length - 1; i >= 0; --i) {\r\n                const decorator = decorators[i];\r\n                const decorated = decorator(target);\r\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n                    if (!IsConstructor(decorated)) throw new TypeError();\r\n                    target = <Function>decorated;\r\n                }\r\n            }\r\n            return target;\r\n        }\r\n\r\n        function DecorateProperty(decorators: MemberDecorator[], target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor | undefined): PropertyDescriptor | undefined {\r\n            for (let i = decorators.length - 1; i >= 0; --i) {\r\n                const decorator = decorators[i];\r\n                const decorated = decorator(target, propertyKey, descriptor);\r\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n                    if (!IsObject(decorated)) throw new TypeError();\r\n                    descriptor = <PropertyDescriptor>decorated;\r\n                }\r\n            }\r\n            return descriptor;\r\n        }\r\n\r\n        // 2.1.1 GetOrCreateMetadataMap(O, P, Create)\r\n        // https://rbuckton.github.io/reflect-metadata/#getorcreatemetadatamap\r\n        function GetOrCreateMetadataMap(O: any, P: string | symbol | undefined, Create: true): Map<any, any>;\r\n        function GetOrCreateMetadataMap(O: any, P: string | symbol | undefined, Create: false): Map<any, any> | undefined;\r\n        function GetOrCreateMetadataMap(O: any, P: string | symbol | undefined, Create: boolean): Map<any, any> | undefined {\r\n            let targetMetadata = Metadata.get(O);\r\n            if (IsUndefined(targetMetadata)) {\r\n                if (!Create) return undefined;\r\n                targetMetadata = new _Map<string | symbol | undefined, Map<any, any>>();\r\n                Metadata.set(O, targetMetadata);\r\n            }\r\n            let metadataMap = targetMetadata.get(P);\r\n            if (IsUndefined(metadataMap)) {\r\n                if (!Create) return undefined;\r\n                metadataMap = new _Map<any, any>();\r\n                targetMetadata.set(P, metadataMap);\r\n            }\r\n            return metadataMap;\r\n        }\r\n\r\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\r\n        function OrdinaryHasMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): boolean {\r\n            const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n            if (hasOwn) return true;\r\n            const parent = OrdinaryGetPrototypeOf(O);\r\n            if (!IsNull(parent)) return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n            return false;\r\n        }\r\n\r\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\r\n        function OrdinaryHasOwnMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): boolean {\r\n            const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n            if (IsUndefined(metadataMap)) return false;\r\n            return ToBoolean(metadataMap.has(MetadataKey));\r\n        }\r\n\r\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\r\n        function OrdinaryGetMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): any {\r\n            const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n            if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n            const parent = OrdinaryGetPrototypeOf(O);\r\n            if (!IsNull(parent)) return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n            return undefined;\r\n        }\r\n\r\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\r\n        function OrdinaryGetOwnMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): any {\r\n            const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n            if (IsUndefined(metadataMap)) return undefined;\r\n            return metadataMap.get(MetadataKey);\r\n        }\r\n\r\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\r\n        function OrdinaryDefineOwnMetadata(MetadataKey: any, MetadataValue: any, O: any, P: string | symbol | undefined): void {\r\n            const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\r\n            metadataMap.set(MetadataKey, MetadataValue);\r\n        }\r\n\r\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\r\n        function OrdinaryMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n            const ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n            const parent = OrdinaryGetPrototypeOf(O);\r\n            if (parent === null) return ownKeys;\r\n            const parentKeys = OrdinaryMetadataKeys(parent, P);\r\n            if (parentKeys.length <= 0) return ownKeys;\r\n            if (ownKeys.length <= 0) return parentKeys;\r\n            const set = new _Set<any>();\r\n            const keys: any[] = [];\r\n            for (const key of ownKeys) {\r\n                const hasKey = set.has(key);\r\n                if (!hasKey) {\r\n                    set.add(key);\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            for (const key of parentKeys) {\r\n                const hasKey = set.has(key);\r\n                if (!hasKey) {\r\n                    set.add(key);\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            return keys;\r\n        }\r\n\r\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\r\n        function OrdinaryOwnMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n            const keys: any[] = [];\r\n            const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n            if (IsUndefined(metadataMap)) return keys;\r\n            const keysObj = metadataMap.keys();\r\n            const iterator = GetIterator(keysObj);\r\n            let k = 0;\r\n            while (true) {\r\n                const next = IteratorStep(iterator);\r\n                if (!next) {\r\n                    keys.length = k;\r\n                    return keys;\r\n                }\r\n                const nextValue = IteratorValue(next);\r\n                try {\r\n                    keys[k] = nextValue;\r\n                }\r\n                catch (e) {\r\n                    try {\r\n                        IteratorClose(iterator);\r\n                    }\r\n                    finally {\r\n                        throw e;\r\n                    }\r\n                }\r\n                k++;\r\n            }\r\n        }\r\n\r\n        // 6 ECMAScript Data Typ0es and Values\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\r\n        function Type(x: any): Tag {\r\n            if (x === null) return Tag.Null;\r\n            switch (typeof x) {\r\n                case \"undefined\": return Tag.Undefined;\r\n                case \"boolean\": return Tag.Boolean;\r\n                case \"string\": return Tag.String;\r\n                case \"symbol\": return Tag.Symbol;\r\n                case \"number\": return Tag.Number;\r\n                case \"object\": return x === null ? Tag.Null : Tag.Object;\r\n                default: return Tag.Object;\r\n            }\r\n        }\r\n\r\n        // 6.1 ECMAScript Language Types\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types\r\n        const enum Tag {\r\n            Undefined,\r\n            Null,\r\n            Boolean,\r\n            String,\r\n            Symbol,\r\n            Number,\r\n            Object\r\n        }\r\n\r\n        // 6.1.1 The Undefined Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\r\n        function IsUndefined(x: any): x is undefined {\r\n            return x === undefined;\r\n        }\r\n\r\n        // 6.1.2 The Null Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\r\n        function IsNull(x: any): x is null {\r\n            return x === null;\r\n        }\r\n\r\n        // 6.1.5 The Symbol Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\r\n        function IsSymbol(x: any): x is symbol {\r\n            return typeof x === \"symbol\";\r\n        }\r\n\r\n        // 6.1.7 The Object Type\r\n        // https://tc39.github.io/ecma262/#sec-object-type\r\n        function IsObject<T>(x: T | undefined | null | boolean | string | symbol | number): x is T {\r\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n        }\r\n\r\n        // 7.1 Type Conversion\r\n        // https://tc39.github.io/ecma262/#sec-type-conversion\r\n\r\n        // 7.1.1 ToPrimitive(input [, PreferredType])\r\n        // https://tc39.github.io/ecma262/#sec-toprimitive\r\n        function ToPrimitive(input: any, PreferredType?: Tag): undefined | null | boolean | string | symbol | number {\r\n            switch (Type(input)) {\r\n                case Tag.Undefined: return input;\r\n                case Tag.Null: return input;\r\n                case Tag.Boolean: return input;\r\n                case Tag.String: return input;\r\n                case Tag.Symbol: return input;\r\n                case Tag.Number: return input;\r\n            }\r\n            const hint: \"string\" | \"number\" | \"default\" = PreferredType === Tag.String ? \"string\" : PreferredType === Tag.Number ? \"number\" : \"default\";\r\n            const exoticToPrim = GetMethod(input, toPrimitiveSymbol);\r\n            if (exoticToPrim !== undefined) {\r\n                const result = exoticToPrim.call(input, hint);\r\n                if (IsObject(result)) throw new TypeError();\r\n                return result;\r\n            }\r\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\r\n        }\r\n\r\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\r\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\r\n        function OrdinaryToPrimitive(O: any, hint: \"string\" | \"number\"): undefined | null | boolean | string | symbol | number {\r\n            if (hint === \"string\") {\r\n                const toString = O.toString;\r\n                if (IsCallable(toString)) {\r\n                    const result = toString.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n                const valueOf = O.valueOf;\r\n                if (IsCallable(valueOf)) {\r\n                    const result = valueOf.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n            }\r\n            else {\r\n                const valueOf = O.valueOf;\r\n                if (IsCallable(valueOf)) {\r\n                    const result = valueOf.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n                const toString = O.toString;\r\n                if (IsCallable(toString)) {\r\n                    const result = toString.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n            }\r\n            throw new TypeError();\r\n        }\r\n\r\n        // 7.1.2 ToBoolean(argument)\r\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\r\n        function ToBoolean(argument: any): boolean {\r\n            return !!argument;\r\n        }\r\n\r\n        // 7.1.12 ToString(argument)\r\n        // https://tc39.github.io/ecma262/#sec-tostring\r\n        function ToString(argument: any): string {\r\n            return \"\" + argument;\r\n        }\r\n\r\n        // 7.1.14 ToPropertyKey(argument)\r\n        // https://tc39.github.io/ecma262/#sec-topropertykey\r\n        function ToPropertyKey(argument: any): string | symbol {\r\n            const key = ToPrimitive(argument, Tag.String);\r\n            if (IsSymbol(key)) return key;\r\n            return ToString(key);\r\n        }\r\n\r\n        // 7.2 Testing and Comparison Operations\r\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\r\n\r\n        // 7.2.2 IsArray(argument)\r\n        // https://tc39.github.io/ecma262/#sec-isarray\r\n        function IsArray(argument: any): argument is any[] {\r\n            return Array.isArray\r\n                ? Array.isArray(argument)\r\n                : argument instanceof Object\r\n                    ? argument instanceof Array\r\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\r\n        }\r\n\r\n        // 7.2.3 IsCallable(argument)\r\n        // https://tc39.github.io/ecma262/#sec-iscallable\r\n        function IsCallable(argument: any): argument is Function {\r\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\r\n            return typeof argument === \"function\";\r\n        }\r\n\r\n        // 7.2.4 IsConstructor(argument)\r\n        // https://tc39.github.io/ecma262/#sec-isconstructor\r\n        function IsConstructor(argument: any): argument is Function {\r\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\r\n            return typeof argument === \"function\";\r\n        }\r\n\r\n        // 7.2.7 IsPropertyKey(argument)\r\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\r\n        function IsPropertyKey(argument: any): argument is string | symbol {\r\n            switch (Type(argument)) {\r\n                case Tag.String: return true;\r\n                case Tag.Symbol: return true;\r\n                default: return false;\r\n            }\r\n        }\r\n\r\n        // 7.3 Operations on Objects\r\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\r\n\r\n        // 7.3.9 GetMethod(V, P)\r\n        // https://tc39.github.io/ecma262/#sec-getmethod\r\n        function GetMethod(V: any, P: any): Function | undefined {\r\n            const func = V[P];\r\n            if (func === undefined || func === null) return undefined;\r\n            if (!IsCallable(func)) throw new TypeError();\r\n            return func;\r\n        }\r\n\r\n        // 7.4 Operations on Iterator Objects\r\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\r\n\r\n        function GetIterator<T>(obj: Iterable<T>): Iterator<T> {\r\n            const method = GetMethod(obj, iteratorSymbol);\r\n            if (!IsCallable(method)) throw new TypeError(); // from Call\r\n            const iterator = method.call(obj);\r\n            if (!IsObject(iterator)) throw new TypeError();\r\n            return iterator;\r\n        }\r\n\r\n        // 7.4.4 IteratorValue(iterResult)\r\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\r\n        function IteratorValue<T>(iterResult: IteratorResult<T>): T {\r\n            return iterResult.value;\r\n        }\r\n\r\n        // 7.4.5 IteratorStep(iterator)\r\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\r\n        function IteratorStep<T>(iterator: Iterator<T>): IteratorResult<T> | false {\r\n            const result = iterator.next();\r\n            return result.done ? false : result;\r\n        }\r\n\r\n        // 7.4.6 IteratorClose(iterator, completion)\r\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\r\n        function IteratorClose<T>(iterator: Iterator<T>) {\r\n            const f = iterator[\"return\"];\r\n            if (f) f.call(iterator);\r\n        }\r\n\r\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\r\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\r\n\r\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\r\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\r\n        function OrdinaryGetPrototypeOf(O: any): any {\r\n            const proto = Object.getPrototypeOf(O);\r\n            if (typeof O !== \"function\" || O === functionPrototype) return proto;\r\n\r\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\r\n            // Try to determine the superclass constructor. Compatible implementations\r\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n            // or ensure each class has a valid `constructor` property on its prototype that\r\n            // points back to the constructor.\r\n\r\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n            if (proto !== functionPrototype) return proto;\r\n\r\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n            const prototype = O.prototype;\r\n            const prototypeProto = prototype && Object.getPrototypeOf(prototype);\r\n            if (prototypeProto == null || prototypeProto === Object.prototype) return proto;\r\n\r\n            // If the constructor was not a function, then we cannot determine the heritage.\r\n            const constructor = prototypeProto.constructor;\r\n            if (typeof constructor !== \"function\") return proto;\r\n\r\n            // If we have some kind of self-reference, then we cannot determine the heritage.\r\n            if (constructor === O) return proto;\r\n\r\n            // we have a pretty good guess at the heritage.\r\n            return constructor;\r\n        }\r\n\r\n        // naive Map shim\r\n        function CreateMapPolyfill(): MapConstructor {\r\n            const cacheSentinel = {};\r\n            const arraySentinel: any[] = [];\r\n\r\n            class MapIterator<K, V, R extends (K | V | [K, V])> implements IterableIterator<R> {\r\n                private _keys: K[];\r\n                private _values: V[];\r\n                private _index = 0;\r\n                private _selector: (key: K, value: V) => R;\r\n                constructor(keys: K[], values: V[], selector: (key: K, value: V) => R) {\r\n                    this._keys = keys;\r\n                    this._values = values;\r\n                    this._selector = selector;\r\n                }\r\n                \"@@iterator\"() { return this; }\r\n                [iteratorSymbol]() { return this; }\r\n                next(): IteratorResult<R> {\r\n                    const index = this._index;\r\n                    if (index >= 0 && index < this._keys.length) {\r\n                        const result = this._selector(this._keys[index], this._values[index]);\r\n                        if (index + 1 >= this._keys.length) {\r\n                            this._index = -1;\r\n                            this._keys = arraySentinel;\r\n                            this._values = arraySentinel;\r\n                        }\r\n                        else {\r\n                            this._index++;\r\n                        }\r\n                        return { value: result, done: false };\r\n                    }\r\n                    return { value: <never>undefined, done: true };\r\n                }\r\n                throw(error: any): IteratorResult<R> {\r\n                    if (this._index >= 0) {\r\n                        this._index = -1;\r\n                        this._keys = arraySentinel;\r\n                        this._values = arraySentinel;\r\n                    }\r\n                    throw error;\r\n                }\r\n                return(value?: R): IteratorResult<R> {\r\n                    if (this._index >= 0) {\r\n                        this._index = -1;\r\n                        this._keys = arraySentinel;\r\n                        this._values = arraySentinel;\r\n                    }\r\n                    return { value: <never>value, done: true };\r\n                }\r\n            }\r\n\r\n            return class Map<K, V> {\r\n                private _keys: K[] = [];\r\n                private _values: (V | undefined)[] = [];\r\n                private _cacheKey = cacheSentinel;\r\n                private _cacheIndex = -2;\r\n                get size() { return this._keys.length; }\r\n                has(key: K): boolean { return this._find(key, /*insert*/ false) >= 0; }\r\n                get(key: K): V | undefined {\r\n                    const index = this._find(key, /*insert*/ false);\r\n                    return index >= 0 ? this._values[index] : undefined;\r\n                }\r\n                set(key: K, value: V): this {\r\n                    const index = this._find(key, /*insert*/ true);\r\n                    this._values[index] = value;\r\n                    return this;\r\n                }\r\n                delete(key: K): boolean {\r\n                    const index = this._find(key, /*insert*/ false);\r\n                    if (index >= 0) {\r\n                        const size = this._keys.length;\r\n                        for (let i = index + 1; i < size; i++) {\r\n                            this._keys[i - 1] = this._keys[i];\r\n                            this._values[i - 1] = this._values[i];\r\n                        }\r\n                        this._keys.length--;\r\n                        this._values.length--;\r\n                        if (key === this._cacheKey) {\r\n                            this._cacheKey = cacheSentinel;\r\n                            this._cacheIndex = -2;\r\n                        }\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n                clear(): void {\r\n                    this._keys.length = 0;\r\n                    this._values.length = 0;\r\n                    this._cacheKey = cacheSentinel;\r\n                    this._cacheIndex = -2;\r\n                }\r\n                keys() { return new MapIterator(this._keys, this._values, getKey); }\r\n                values() { return new MapIterator(this._keys, this._values, getValue); }\r\n                entries() { return new MapIterator(this._keys, this._values, getEntry); }\r\n                \"@@iterator\"() { return this.entries(); }\r\n                [iteratorSymbol]() { return this.entries(); }\r\n                private _find(key: K, insert?: boolean): number {\r\n                    if (this._cacheKey !== key) {\r\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\r\n                    }\r\n                    if (this._cacheIndex < 0 && insert) {\r\n                        this._cacheIndex = this._keys.length;\r\n                        this._keys.push(key);\r\n                        this._values.push(undefined);\r\n                    }\r\n                    return this._cacheIndex;\r\n                }\r\n            };\r\n\r\n            function getKey<K, V>(key: K, _: V) {\r\n                return key;\r\n            }\r\n\r\n            function getValue<K, V>(_: K, value: V) {\r\n                return value;\r\n            }\r\n\r\n            function getEntry<K, V>(key: K, value: V) {\r\n                return [key, value] as [K, V];\r\n            }\r\n        }\r\n\r\n        // naive Set shim\r\n        function CreateSetPolyfill(): SetConstructor {\r\n            return class Set<T> {\r\n                private _map = new _Map<any, any>();\r\n                get size() { return this._map.size; }\r\n                has(value: T): boolean { return this._map.has(value); }\r\n                add(value: T): Set<T> { return this._map.set(value, value), this; }\r\n                delete(value: T): boolean { return this._map.delete(value); }\r\n                clear(): void { this._map.clear(); }\r\n                keys() { return this._map.keys(); }\r\n                values() { return this._map.values(); }\r\n                entries() { return this._map.entries(); }\r\n                \"@@iterator\"() { return this.keys(); }\r\n                [iteratorSymbol]() { return this.keys(); }\r\n            };\r\n        }\r\n\r\n        // naive WeakMap shim\r\n        function CreateWeakMapPolyfill(): WeakMapConstructor {\r\n            const UUID_SIZE = 16;\r\n            const keys = HashMap.create<boolean>();\r\n            const rootKey = CreateUniqueKey();\r\n            return class WeakMap<K, V> {\r\n                private _key = CreateUniqueKey();\r\n                has(target: K): boolean {\r\n                    const table = GetOrCreateWeakMapTable<K>(target, /*create*/ false);\r\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\r\n                }\r\n                get(target: K): V {\r\n                    const table = GetOrCreateWeakMapTable<K>(target, /*create*/ false);\r\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\r\n                }\r\n                set(target: K, value: V): WeakMap<K, V> {\r\n                    const table = GetOrCreateWeakMapTable<K>(target, /*create*/ true);\r\n                    table[this._key] = value;\r\n                    return this;\r\n                }\r\n                delete(target: K): boolean {\r\n                    const table = GetOrCreateWeakMapTable<K>(target, /*create*/ false);\r\n                    return table !== undefined ? delete table[this._key] : false;\r\n                }\r\n                clear(): void {\r\n                    // NOTE: not a real clear, just makes the previous data unreachable\r\n                    this._key = CreateUniqueKey();\r\n                }\r\n            };\r\n\r\n            function CreateUniqueKey(): string {\r\n                let key: string;\r\n                do key = \"@@WeakMap@@\" + CreateUUID();\r\n                while (HashMap.has(keys, key));\r\n                keys[key] = true;\r\n                return key;\r\n            }\r\n\r\n            function GetOrCreateWeakMapTable<K>(target: K, create: true): HashMap<any>;\r\n            function GetOrCreateWeakMapTable<K>(target: K, create: false): HashMap<any> | undefined;\r\n            function GetOrCreateWeakMapTable<K>(target: K, create: boolean): HashMap<any> | undefined {\r\n                if (!hasOwn.call(target, rootKey)) {\r\n                    if (!create) return undefined;\r\n                    Object.defineProperty(target, rootKey, { value: HashMap.create<any>() });\r\n                }\r\n                return (<any>target)[rootKey];\r\n            }\r\n\r\n            function FillRandomBytes(buffer: BufferLike, size: number): BufferLike {\r\n                for (let i = 0; i < size; ++i) buffer[i] = Math.random() * 0xff | 0;\r\n                return buffer;\r\n            }\r\n\r\n            function GenRandomBytes(size: number): BufferLike {\r\n                if (typeof Uint8Array === \"function\") {\r\n                    if (typeof crypto !== \"undefined\") return crypto.getRandomValues(new Uint8Array(size)) as Uint8Array;\r\n                    if (typeof msCrypto !== \"undefined\") return msCrypto.getRandomValues(new Uint8Array(size)) as Uint8Array;\r\n                    return FillRandomBytes(new Uint8Array(size), size);\r\n                }\r\n                return FillRandomBytes(new Array(size), size);\r\n            }\r\n\r\n            function CreateUUID() {\r\n                const data = GenRandomBytes(UUID_SIZE);\r\n                // mark as random - RFC 4122 § 4.4\r\n                data[6] = data[6] & 0x4f | 0x40;\r\n                data[8] = data[8] & 0xbf | 0x80;\r\n                let result = \"\";\r\n                for (let offset = 0; offset < UUID_SIZE; ++offset) {\r\n                    const byte = data[offset];\r\n                    if (offset === 4 || offset === 6 || offset === 8) result += \"-\";\r\n                    if (byte < 16) result += \"0\";\r\n                    result += byte.toString(16).toLowerCase();\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n\r\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\r\n        function MakeDictionary<T>(obj: T): T {\r\n            (<any>obj).__ = undefined;\r\n            delete (<any>obj).__;\r\n            return obj;\r\n        }\r\n    });\r\n}"]}